{
	"name": "Apache Spark Visualizations",
	"properties": {
		"description": "Using matplotlib and seaborn for df visuals.",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkuyld2gn",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3ff7df55-03d7-4617-9be4-13fc147d0e6e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/03abaa34-9cfc-472c-908a-b70440a24cd7/resourceGroups/dp500-uyld2gn/providers/Microsoft.Synapse/workspaces/synapseuyld2gn/bigDataPools/sparkuyld2gn",
				"name": "sparkuyld2gn",
				"type": "Spark",
				"endpoint": "https://synapseuyld2gn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkuyld2gn",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"orderSchema = StructType([\r\n",
					"     StructField(\"SalesOrderNumber\", StringType()),\r\n",
					"     StructField(\"SalesOrderLineNumber\", IntegerType()),\r\n",
					"     StructField(\"OrderDate\", DateType()),\r\n",
					"     StructField(\"CustomerName\", StringType()),\r\n",
					"     StructField(\"Email\", StringType()),\r\n",
					"     StructField(\"Item\", StringType()),\r\n",
					"     StructField(\"Quantity\", IntegerType()),\r\n",
					"     StructField(\"UnitPrice\", FloatType()),\r\n",
					"     StructField(\"Tax\", FloatType())\r\n",
					"    ])\r\n",
					"\r\n",
					"\r\n",
					"df = spark.read.load('abfss://files@datalakeuyld2gn.dfs.core.windows.net/sales/orders/2021.csv', format='csv', schema=orderSchema\r\n",
					"##, header=True\r\n",
					")\r\n",
					"display(df.limit(100))"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"customers = df.select('CustomerName', 'Email').where(df['Item']=='Road-250 Red, 52')\n",
					"print(customers.count())\n",
					"print(customers.distinct().count())\n",
					"display(customers.distinct())"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"productSales = df.select(\"Item\", \"Quantity\").groupBy(\"Item\").sum()\n",
					"display(productSales)"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"yearlySales = df.select(year(\"OrderDate\").alias(\"Year\")).groupby(\"Year\").count().orderBy(\"Year\")\n",
					"display(yearlySales)\n",
					"\n",
					"\n",
					"'''  \n",
					"Run the code cell you added, and note that the results show the number of sales orders per year.    /n\n",
					"Note that the select method includes a SQL year function to extract the year component of           /n\n",
					"the OrderDate field, and then an alias method is used to assign a columm name to the extracted      /n\n",
					"year value. The data is then grouped by the derived Year column and the count of rows in each       /n\n",
					"group is calculated before finally the orderBy method is used to sort the resulting dataframe.\n",
					"'''"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df.createOrReplaceTempView(\"salesorders\")\n",
					"spark_df = spark.sql(\"select * from salesorders\")\n",
					"display(spark_df)"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select year(OrderDate) as OrderYear,\n",
					"    sum((UnitPrice * Quantity) + Tax) as GrossRevenue\n",
					"from salesorders\n",
					"group by year(OrderDate)\n",
					"order by OrderYear;"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select * from salesorders"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" sqlQuery = \"SELECT CAST(YEAR(OrderDate) AS CHAR(4)) AS OrderYear, \\\n",
					"                 SUM((UnitPrice * Quantity) + Tax) AS GrossRevenue \\\n",
					"             FROM salesorders \\\n",
					"             GROUP BY CAST(YEAR(OrderDate) AS CHAR(4)) \\\n",
					"             ORDER BY OrderYear\"\n",
					" df_spark = spark.sql(sqlQuery)\n",
					" df_spark.show()\n",
					""
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from matplotlib import pyplot as plt\n",
					"\n",
					"df_sales = df_spark.toPandas()\n",
					"\n",
					"plt.bar(x=df_sales['OrderYear'], height=df_sales['GrossRevenue'])\n",
					"\n",
					"plt.show()"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # Clear the plot area\n",
					" plt.clf()\n",
					"\n",
					" # Create a bar plot of revenue by year\n",
					" plt.bar(x=df_sales['OrderYear'], height=df_sales['GrossRevenue'], color='orange')\n",
					"\n",
					" # Customize the chart\n",
					" plt.title('Revenue by Year')\n",
					" plt.xlabel('Year')\n",
					" plt.ylabel('Revenue')\n",
					" plt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\n",
					" plt.xticks(rotation=45)\n",
					"\n",
					" # Show the figure\n",
					" plt.show()\n",
					""
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # Clear the plot area\n",
					" plt.clf()\n",
					"\n",
					" # Create a Figure\n",
					" fig = plt.figure(figsize=(8,3))\n",
					"\n",
					" # Create a bar plot of revenue by year\n",
					" plt.bar(x=df_sales['OrderYear'], height=df_sales['GrossRevenue'], color='orange')\n",
					"\n",
					" # Customize the chart\n",
					" plt.title('Revenue by Year')\n",
					" plt.xlabel('Year')\n",
					" plt.ylabel('Revenue')\n",
					" plt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\n",
					" plt.xticks(rotation=45)\n",
					"\n",
					" # Show the figure\n",
					" plt.show()\n",
					""
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # Clear the plot area\n",
					" plt.clf()\n",
					"\n",
					" # Create a figure for 2 subplots (1 row, 2 columns)\n",
					" fig, ax = plt.subplots(1, 2, figsize = (10,4))\n",
					"\n",
					" # Create a bar plot of revenue by year on the first axis\n",
					" ax[0].bar(x=df_sales['OrderYear'], height=df_sales['GrossRevenue'], color='orange')\n",
					" ax[0].set_title('Revenue by Year')\n",
					"\n",
					" # Create a pie chart of yearly order counts on the second axis\n",
					" yearly_counts = df_sales['OrderYear'].value_counts()\n",
					" ax[1].pie(yearly_counts)\n",
					" ax[1].set_title('Orders per Year')\n",
					" ax[1].legend(yearly_counts.keys().tolist())\n",
					"\n",
					" # Add a title to the Figure\n",
					" fig.suptitle('Sales Data')\n",
					"\n",
					" # Show the figure\n",
					" plt.show()\n",
					""
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" import seaborn as sns\n",
					"\n",
					" # Clear the plot area\n",
					" plt.clf()\n",
					"\n",
					" # Create a bar chart\n",
					" ax = sns.barplot(x=\"OrderYear\", y=\"GrossRevenue\", data=df_sales)\n",
					" plt.show()\n",
					""
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # Clear the plot area\n",
					" plt.clf()\n",
					"\n",
					" # Set the visual theme for seaborn\n",
					" sns.set_theme(style=\"whitegrid\")\n",
					"\n",
					" # Create a bar chart\n",
					" ax = sns.barplot(x=\"OrderYear\", y=\"GrossRevenue\", data=df_sales)\n",
					" plt.show()\n",
					""
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # Clear the plot area\n",
					" plt.clf()\n",
					"\n",
					" # Create a bar chart\n",
					" ax = sns.lineplot(x=\"OrderYear\", y=\"GrossRevenue\", data=df_sales)\n",
					" plt.show()\n",
					""
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}